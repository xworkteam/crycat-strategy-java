/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xteam.crycat.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-03-22")
public class RobotStrategy implements org.apache.thrift.TBase<RobotStrategy, RobotStrategy._Fields>, java.io.Serializable, Cloneable, Comparable<RobotStrategy> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RobotStrategy");

  private static final org.apache.thrift.protocol.TField CLAZZ_FIELD_DESC = new org.apache.thrift.protocol.TField("clazz", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SYMBOLS_FIELD_DESC = new org.apache.thrift.protocol.TField("symbols", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RobotStrategyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RobotStrategyTupleSchemeFactory();

  public String clazz; // optional
  public String code; // optional
  public java.util.List<String> symbols; // optional
  public java.util.Map<String,String> params; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLAZZ((short)1, "clazz"),
    CODE((short)2, "code"),
    SYMBOLS((short)3, "symbols"),
    PARAMS((short)4, "params");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLAZZ
          return CLAZZ;
        case 2: // CODE
          return CODE;
        case 3: // SYMBOLS
          return SYMBOLS;
        case 4: // PARAMS
          return PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CLAZZ,_Fields.CODE,_Fields.SYMBOLS,_Fields.PARAMS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLAZZ, new org.apache.thrift.meta_data.FieldMetaData("clazz", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYMBOLS, new org.apache.thrift.meta_data.FieldMetaData("symbols", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RobotStrategy.class, metaDataMap);
  }

  public RobotStrategy() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RobotStrategy(RobotStrategy other) {
    if (other.isSetClazz()) {
      this.clazz = other.clazz;
    }
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetSymbols()) {
      java.util.List<String> __this__symbols = new java.util.ArrayList<String>(other.symbols);
      this.symbols = __this__symbols;
    }
    if (other.isSetParams()) {
      java.util.Map<String,String> __this__params = new java.util.HashMap<String,String>(other.params);
      this.params = __this__params;
    }
  }

  public RobotStrategy deepCopy() {
    return new RobotStrategy(this);
  }

  @Override
  public void clear() {
    this.clazz = null;
    this.code = null;
    this.symbols = null;
    this.params = null;
  }

  public String getClazz() {
    return this.clazz;
  }

  public RobotStrategy setClazz(String clazz) {
    this.clazz = clazz;
    return this;
  }

  public void unsetClazz() {
    this.clazz = null;
  }

  /** Returns true if field clazz is set (has been assigned a value) and false otherwise */
  public boolean isSetClazz() {
    return this.clazz != null;
  }

  public void setClazzIsSet(boolean value) {
    if (!value) {
      this.clazz = null;
    }
  }

  public String getCode() {
    return this.code;
  }

  public RobotStrategy setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public int getSymbolsSize() {
    return (this.symbols == null) ? 0 : this.symbols.size();
  }

  public java.util.Iterator<String> getSymbolsIterator() {
    return (this.symbols == null) ? null : this.symbols.iterator();
  }

  public void addToSymbols(String elem) {
    if (this.symbols == null) {
      this.symbols = new java.util.ArrayList<String>();
    }
    this.symbols.add(elem);
  }

  public java.util.List<String> getSymbols() {
    return this.symbols;
  }

  public RobotStrategy setSymbols(java.util.List<String> symbols) {
    this.symbols = symbols;
    return this;
  }

  public void unsetSymbols() {
    this.symbols = null;
  }

  /** Returns true if field symbols is set (has been assigned a value) and false otherwise */
  public boolean isSetSymbols() {
    return this.symbols != null;
  }

  public void setSymbolsIsSet(boolean value) {
    if (!value) {
      this.symbols = null;
    }
  }

  public int getParamsSize() {
    return (this.params == null) ? 0 : this.params.size();
  }

  public void putToParams(String key, String val) {
    if (this.params == null) {
      this.params = new java.util.HashMap<String,String>();
    }
    this.params.put(key, val);
  }

  public java.util.Map<String,String> getParams() {
    return this.params;
  }

  public RobotStrategy setParams(java.util.Map<String,String> params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLAZZ:
      if (value == null) {
        unsetClazz();
      } else {
        setClazz((String)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case SYMBOLS:
      if (value == null) {
        unsetSymbols();
      } else {
        setSymbols((java.util.List<String>)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((java.util.Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLAZZ:
      return getClazz();

    case CODE:
      return getCode();

    case SYMBOLS:
      return getSymbols();

    case PARAMS:
      return getParams();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLAZZ:
      return isSetClazz();
    case CODE:
      return isSetCode();
    case SYMBOLS:
      return isSetSymbols();
    case PARAMS:
      return isSetParams();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RobotStrategy)
      return this.equals((RobotStrategy)that);
    return false;
  }

  public boolean equals(RobotStrategy that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_clazz = true && this.isSetClazz();
    boolean that_present_clazz = true && that.isSetClazz();
    if (this_present_clazz || that_present_clazz) {
      if (!(this_present_clazz && that_present_clazz))
        return false;
      if (!this.clazz.equals(that.clazz))
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_symbols = true && this.isSetSymbols();
    boolean that_present_symbols = true && that.isSetSymbols();
    if (this_present_symbols || that_present_symbols) {
      if (!(this_present_symbols && that_present_symbols))
        return false;
      if (!this.symbols.equals(that.symbols))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetClazz()) ? 131071 : 524287);
    if (isSetClazz())
      hashCode = hashCode * 8191 + clazz.hashCode();

    hashCode = hashCode * 8191 + ((isSetCode()) ? 131071 : 524287);
    if (isSetCode())
      hashCode = hashCode * 8191 + code.hashCode();

    hashCode = hashCode * 8191 + ((isSetSymbols()) ? 131071 : 524287);
    if (isSetSymbols())
      hashCode = hashCode * 8191 + symbols.hashCode();

    hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
    if (isSetParams())
      hashCode = hashCode * 8191 + params.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(RobotStrategy other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClazz()).compareTo(other.isSetClazz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClazz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clazz, other.clazz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSymbols()).compareTo(other.isSetSymbols());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSymbols()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symbols, other.symbols);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RobotStrategy(");
    boolean first = true;

    if (isSetClazz()) {
      sb.append("clazz:");
      if (this.clazz == null) {
        sb.append("null");
      } else {
        sb.append(this.clazz);
      }
      first = false;
    }
    if (isSetCode()) {
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
    }
    if (isSetSymbols()) {
      if (!first) sb.append(", ");
      sb.append("symbols:");
      if (this.symbols == null) {
        sb.append("null");
      } else {
        sb.append(this.symbols);
      }
      first = false;
    }
    if (isSetParams()) {
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RobotStrategyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RobotStrategyStandardScheme getScheme() {
      return new RobotStrategyStandardScheme();
    }
  }

  private static class RobotStrategyStandardScheme extends org.apache.thrift.scheme.StandardScheme<RobotStrategy> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RobotStrategy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLAZZ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clazz = iprot.readString();
              struct.setClazzIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SYMBOLS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.symbols = new java.util.ArrayList<String>(_list18.size);
                String _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = iprot.readString();
                  struct.symbols.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setSymbolsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map21 = iprot.readMapBegin();
                struct.params = new java.util.HashMap<String,String>(2*_map21.size);
                String _key22;
                String _val23;
                for (int _i24 = 0; _i24 < _map21.size; ++_i24)
                {
                  _key22 = iprot.readString();
                  _val23 = iprot.readString();
                  struct.params.put(_key22, _val23);
                }
                iprot.readMapEnd();
              }
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RobotStrategy struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clazz != null) {
        if (struct.isSetClazz()) {
          oprot.writeFieldBegin(CLAZZ_FIELD_DESC);
          oprot.writeString(struct.clazz);
          oprot.writeFieldEnd();
        }
      }
      if (struct.code != null) {
        if (struct.isSetCode()) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
      }
      if (struct.symbols != null) {
        if (struct.isSetSymbols()) {
          oprot.writeFieldBegin(SYMBOLS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.symbols.size()));
            for (String _iter25 : struct.symbols)
            {
              oprot.writeString(_iter25);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.params != null) {
        if (struct.isSetParams()) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (java.util.Map.Entry<String, String> _iter26 : struct.params.entrySet())
            {
              oprot.writeString(_iter26.getKey());
              oprot.writeString(_iter26.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RobotStrategyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RobotStrategyTupleScheme getScheme() {
      return new RobotStrategyTupleScheme();
    }
  }

  private static class RobotStrategyTupleScheme extends org.apache.thrift.scheme.TupleScheme<RobotStrategy> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RobotStrategy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetClazz()) {
        optionals.set(0);
      }
      if (struct.isSetCode()) {
        optionals.set(1);
      }
      if (struct.isSetSymbols()) {
        optionals.set(2);
      }
      if (struct.isSetParams()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetClazz()) {
        oprot.writeString(struct.clazz);
      }
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
      if (struct.isSetSymbols()) {
        {
          oprot.writeI32(struct.symbols.size());
          for (String _iter27 : struct.symbols)
          {
            oprot.writeString(_iter27);
          }
        }
      }
      if (struct.isSetParams()) {
        {
          oprot.writeI32(struct.params.size());
          for (java.util.Map.Entry<String, String> _iter28 : struct.params.entrySet())
          {
            oprot.writeString(_iter28.getKey());
            oprot.writeString(_iter28.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RobotStrategy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.clazz = iprot.readString();
        struct.setClazzIsSet(true);
      }
      if (incoming.get(1)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.symbols = new java.util.ArrayList<String>(_list29.size);
          String _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readString();
            struct.symbols.add(_elem30);
          }
        }
        struct.setSymbolsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.params = new java.util.HashMap<String,String>(2*_map32.size);
          String _key33;
          String _val34;
          for (int _i35 = 0; _i35 < _map32.size; ++_i35)
          {
            _key33 = iprot.readString();
            _val34 = iprot.readString();
            struct.params.put(_key33, _val34);
          }
        }
        struct.setParamsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

